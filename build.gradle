import org.gradle.internal.os.OperatingSystem

apply plugin: eclipsebuild.BuildDefinitionPlugin

// target platform definition for all major Eclipse relesease between version 3.6 and 4.5
// the default version is 37 which can be overridden with the -Peclipse.version
// also the target platforms contain 1) the Eclipse SDK 2) the latest junit 3) SWTBot 2.2.1
eclipseBuild {
     defaultEclipseVersion = '44'

    targetPlatform {
        eclipseVersion = '36'
        sdkVersion = "3.6.2.M20110210-1200"
        updateSites = [
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/release-helios",
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/orbit"
        ]
        features = [
            "org.junit"
        ]
    }

    targetPlatform {
        eclipseVersion = '37'
        sdkVersion =  "3.7.2.M20120208-0800"
        updateSites = [
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/release-indigo",
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/orbit"
        ]
        features = [
            "org.junit"
        ]
    }

    targetPlatform {
        eclipseVersion = '42'
        sdkVersion = "4.2.2.M20130204-1200"
        updateSites = [
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/release-juno",
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/orbit"
        ]
        features = [
            "org.junit"
        ]
    }

    targetPlatform {
        eclipseVersion = '43'
        sdkVersion = "4.3.2.M20140221-1700"
        updateSites = [
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/release-kepler",
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/orbit"
        ]
        features = [
            "org.junit"
        ]
    }

    targetPlatform {
        eclipseVersion = '44'
        sdkVersion = "4.4.2.M20150204-1700"
        updateSites = [
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/release-luna",
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/orbit"
        ]
        features = [
            "org.junit"
        ]
    }
    
    targetPlatform {
        eclipseVersion = '45'
        sdkVersion = "4.5.0.I20150203-1300"
        updateSites = [
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/release-mars",
            "http://dev1.gradle.org:8000/eclipse/update-site/mirror/orbit"
        ]
        features = [
            "org.junit"
        ]
    }
}

// read the current version from an external file and add a timestamp suffix if requested by the caller
version = getVersion(file('version.txt').text.trim())

subprojects {
    // set the calculated version on all projects in the hierarchy
    version = rootProject.version

    // the built plugins must be Java 6 compatible, try to compile with JDK 6 if the location is specified by the caller or if it can be derived
    plugins.withType(eclipsebuild.BundlePlugin) {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6

        tasks.withType(AbstractCompile).all {
            options.compilerArgs << '-Xlint:all'
            options.fork = true

            if (OperatingSystem.current().isMacOsX()) {
                options.compilerArgs << '-Werror'
                options.forkOptions.executable = "/usr/libexec/java_home -v $targetCompatibility".execute().text.trim() + "/bin/javac"
            } else if (project.hasProperty('compiler.location')) {
                // quotes required on TeamCity to pass property with spaces, e.g. a Windows file path
                String compilerLocation = project.property('compiler.location').replace('\"', '').replace('\'', '')
                options.compilerArgs << '-Werror'
                options.forkOptions.executable = compilerLocation
            }
        }
    }

    // apply Checkstyle plugin, mainly to ensure license/copyright and javadoc is present
    apply plugin: 'checkstyle'

    // share checkstyle config across all sub-projects
    def checkstyleConfigDir = "$rootDir/gradle/config/checkstyle"
    tasks.withType(Checkstyle).all {
      configFile = "$checkstyleConfigDir/checkstyle.xml" as File
      configProperties = ['checkstyleConfigDir': checkstyleConfigDir]
      inputs.file "$checkstyleConfigDir/suppressions.xml" as File
    }

    // configure the repositories where the external dependencies can be found
    repositories {
        maven {
            name = 'mavenized-target-platform'
            url "${eclipsebuild.Config.on(project).mavenizedTargetPlatformDir}"
        }

        maven {
            name = 'gradle-snapshots'
            url gradleSnapshotsRepositoryUrl
        }

        maven {
            name = 'gradle-releases'
            url gradleReleasesRepositoryUrl
        }

        maven {
            name = 'gradle-remote'
            url gradleRemoteRepositoryUrl
        }
    }
}

String getVersion(def baseVersion) {
    if (project.hasProperty('build.invoker') && project.property('build.invoker') == 'ci') {
        // note that for Eclipse plugin versions, the '-' and '.' character are invalid in front of the build id
        baseVersion + new Date().format('yyyyMMddkkmmss', TimeZone.getTimeZone('GMT'))
    } else {
        baseVersion + new Date().format('yyyyMMdd', TimeZone.getTimeZone('GMT'))
    }
}

wrapper.gradleVersion = '2.4-20150209230027+0000'
